/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { SgcButtonColor, SgcButtonJustify, SgcButtonVariant } from "./components/sgc-button/sgc-button";
import { SgcIconKey, SgcIconSize } from "./components/sgc-icon/sgc-icon";
export { SgcButtonColor, SgcButtonJustify, SgcButtonVariant } from "./components/sgc-button/sgc-button";
export { SgcIconKey, SgcIconSize } from "./components/sgc-icon/sgc-icon";
export namespace Components {
    interface SgcButton {
        "color": SgcButtonColor;
        "isActive": boolean;
        "isDisabled": boolean;
        "justify": SgcButtonJustify;
        "variant": SgcButtonVariant;
    }
    interface SgcIcon {
        "name": SgcIconKey;
        "size": SgcIconSize;
    }
}
export interface SgcButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSgcButtonElement;
}
declare global {
    interface HTMLSgcButtonElementEventMap {
        "button-click": MouseEvent;
    }
    interface HTMLSgcButtonElement extends Components.SgcButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSgcButtonElementEventMap>(type: K, listener: (this: HTMLSgcButtonElement, ev: SgcButtonCustomEvent<HTMLSgcButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSgcButtonElementEventMap>(type: K, listener: (this: HTMLSgcButtonElement, ev: SgcButtonCustomEvent<HTMLSgcButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSgcButtonElement: {
        prototype: HTMLSgcButtonElement;
        new (): HTMLSgcButtonElement;
    };
    interface HTMLSgcIconElement extends Components.SgcIcon, HTMLStencilElement {
    }
    var HTMLSgcIconElement: {
        prototype: HTMLSgcIconElement;
        new (): HTMLSgcIconElement;
    };
    interface HTMLElementTagNameMap {
        "sgc-button": HTMLSgcButtonElement;
        "sgc-icon": HTMLSgcIconElement;
    }
}
declare namespace LocalJSX {
    interface SgcButton {
        "color"?: SgcButtonColor;
        "isActive"?: boolean;
        "isDisabled"?: boolean;
        "justify"?: SgcButtonJustify;
        "onButton-click"?: (event: SgcButtonCustomEvent<MouseEvent>) => void;
        "variant"?: SgcButtonVariant;
    }
    interface SgcIcon {
        "name"?: SgcIconKey;
        "size"?: SgcIconSize;
    }
    interface IntrinsicElements {
        "sgc-button": SgcButton;
        "sgc-icon": SgcIcon;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "sgc-button": LocalJSX.SgcButton & JSXBase.HTMLAttributes<HTMLSgcButtonElement>;
            "sgc-icon": LocalJSX.SgcIcon & JSXBase.HTMLAttributes<HTMLSgcIconElement>;
        }
    }
}
